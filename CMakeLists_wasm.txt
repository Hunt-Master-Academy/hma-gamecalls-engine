# CMakeLists_wasm.txt - Modernized for Emscripten Builds
cmake_minimum_required(VERSION 3.15)
project(HuntmasterEngineWASM CXX C)

# This script must be run with the Emscripten toolchain.
# Example: emcmake cmake ..
if(NOT EMSCRIPTEN)
    message(FATAL_ERROR "This CMake script is for Emscripten only. Use emcmake or a toolchain file.")
endif()

# --- Project Structure Variables ---
set(PROJECT_ROOT ${CMAKE_CURRENT_SOURCE_DIR})
set(PROJECT_INCLUDE_DIR ${PROJECT_ROOT}/include)
set(PROJECT_SOURCE_DIR ${PROJECT_ROOT}/src)
set(PROJECT_LIBS_DIR ${PROJECT_ROOT}/libs)

# --- KissFFT Dependency ---
add_library(
    kissfft_wasm STATIC
    ${PROJECT_LIBS_DIR}/kissfft/kiss_fft.c
    ${PROJECT_LIBS_DIR}/kissfft/tools/kiss_fftr.c
)
# Add kissfft's own directory to its public include path
target_include_directories(kissfft_wasm PUBLIC ${PROJECT_LIBS_DIR}/kissfft)
target_compile_definitions(kissfft_wasm PRIVATE kiss_fft_scalar=float)
# Set C standard specifically for this C library
set_target_properties(kissfft_wasm PROPERTIES C_STANDARD 99)


# --- WebAssembly Module Target ---
add_executable(
    huntmaster_wasm
    # These are the only source files needed for the WASM module
    ${PROJECT_SOURCE_DIR}/WASMInterface.cpp
    ${PROJECT_SOURCE_DIR}/MFCCProcessor.cpp
    ${PROJECT_SOURCE_DIR}/DTWProcessor.cpp
    ${PROJECT_SOURCE_DIR}/ThirdPartyLibs.cpp
)

# Apply C++ standard to our WASM C++ code
target_compile_features(huntmaster_wasm PRIVATE cxx_std_20)

# Add include directories for our source files
target_include_directories(huntmaster_wasm PRIVATE
    ${PROJECT_INCLUDE_DIR}
    ${PROJECT_LIBS_DIR}
)

# Link the kissfft library
target_link_libraries(huntmaster_wasm PRIVATE kissfft_wasm)

# --- Emscripten Specific Options ---
# Use target_compile_options to add all flags correctly.
target_compile_options(huntmaster_wasm PRIVATE
    -O3 # Optimization level
    -s ALLOW_MEMORY_GROWTH=1 # Allow memory to grow beyond initial value
    -s MODULARIZE=1 # Put output into a module
    -s EXPORT_NAME='HuntmasterEngine' # Name of the module
    -s INITIAL_MEMORY=16MB
    -s MAXIMUM_MEMORY=128MB
    -s EXPORTED_RUNTIME_METHODS=['ccall','cwrap','getValue','setValue']
    # NOTE: EXPORTED_FUNCTIONS is no longer needed.
    # EMSCRIPTEN_KEEPALIVE in the C++ code handles this automatically.
)

# --- Output Configuration ---
set_target_properties(huntmaster_wasm PROPERTIES
    OUTPUT_NAME "huntmaster_engine"
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_ROOT}/web/dist"
)