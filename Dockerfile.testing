# Huntmaster Engine Testing Container
# Optimized for code coverage analysis and comprehensive testing

FROM ubuntu:24.04

ARG DEBIAN_FRONTEND=noninteractive
ARG USER_ID=1001
ARG GROUP_ID=1001

# Install build dependencies and coverage tools
RUN apt-get update && apt-get install -y \
    # Build essentials
    build-essential \
    cmake \
    ninja-build \
    git \
    pkg-config \
    # Coverage and analysis tools (gcov comes with gcc)
    gcc \
    g++ \
    lcov \
    gcovr \
    valgrind \
    # Audio libraries
    libpulse-dev \
    libasound2-dev \
    portaudio19-dev \
    libsndfile1-dev \
    # Python for analysis scripts
    python3 \
    python3-pip \
    # Utilities (timeout comes with coreutils)
    coreutils \
    bc \
    curl \
    wget \
    unzip \
    # Clean up
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Python packages for coverage visualization
RUN pip3 install --break-system-packages \
    gcovr \
    coverage \
    pytest \
    matplotlib \
    numpy

# Set up non-root user for testing
RUN groupadd -g ${GROUP_ID} testuser && \
    useradd -u ${USER_ID} -g testuser -m testuser && \
    mkdir -p /huntmaster-engine && \
    chown testuser:testuser /huntmaster-engine

# Copy project
COPY --chown=testuser:testuser . /huntmaster-engine
WORKDIR /huntmaster-engine

# Switch to test user
USER testuser

# Build with coverage instrumentation and C++20
RUN cmake -B build \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_CXX_STANDARD=20 \
    -DCMAKE_CXX_STANDARD_REQUIRED=ON \
    -DCMAKE_CXX_FLAGS="--coverage -g -O0 -fprofile-arcs -ftest-coverage -std=c++20" \
    -DCMAKE_EXE_LINKER_FLAGS="--coverage" \
    -DCMAKE_C_FLAGS="--coverage -g -O0" \
    && cmake --build build --parallel $(nproc)

# Create coverage directories
RUN mkdir -p coverage_reports/html coverage_reports/xml

# Default command runs coverage analysis
CMD ["bash", "-c", "timeout 180 ./scripts/docker_coverage_test.sh"]
