#!/usr/bin/env bash
set -euo pipefail

# Huntmaster Engine – Coverage measurement (CMake/Ninja + gcovr)
# This script assumes the coverage preset/config is already generated by the caller.
# If not, it will attempt to configure and build using the docker-coverage preset.

echo "=== Huntmaster Engine Coverage Analysis ==="

PROJECT_ROOT=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)
BUILD_DIR_REL=${BUILD_DIR:-build/coverage}
BUILD_DIR="$PROJECT_ROOT/$BUILD_DIR_REL"
TEST_BIN="$BUILD_DIR/tests/RunEngineTests"
OUT_DIR="$PROJECT_ROOT/coverage_reports"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
XML_OUT="$OUT_DIR/coverage_${TIMESTAMP}.xml"
HTML_DIR="$OUT_DIR/html_${TIMESTAMP}"
TXT_LOG="$OUT_DIR/coverage_${TIMESTAMP}.log"
COVERAGE_TARGET=${COVERAGE_TARGET:-90}
ENFORCE_COVERAGE=${ENFORCE_COVERAGE:-false}

mkdir -p "$OUT_DIR"

echo "Project root: $PROJECT_ROOT"
echo "Build dir:    $BUILD_DIR"
echo "Output dir:   $OUT_DIR"

# 1) Ensure build exists (configure + build if missing)
if [[ ! -d "$BUILD_DIR" ]]; then
    echo "Configuring coverage build (docker-coverage preset)..."
    (cd "$PROJECT_ROOT" && cmake --preset docker-coverage)
fi

if [[ ! -x "$TEST_BIN" ]]; then
    echo "Building coverage target..."
    (cd "$PROJECT_ROOT" && cmake --build "$BUILD_DIR_REL" --parallel)
fi

if [[ ! -x "$TEST_BIN" ]]; then
    echo "ERROR: Test binary not found: $TEST_BIN"
    exit 1
fi

# Proactively clean stale gcov data to avoid checksum overwrite errors after rebuilds
echo "Cleaning stale coverage data (.gcda) in $BUILD_DIR..."
find "$BUILD_DIR" -type f -name '*.gcda' -delete 2>/dev/null || true

# 2) Run tests to generate .gcda data
echo "Running tests with coverage instrumentation..."
if ! timeout 90 "$TEST_BIN" --gtest_brief=yes; then
    echo "ERROR: Tests failed (see output above). Proceeding to collect coverage anyway."
fi

# 3) Generate coverage reports (prefer gcovr; fallback to basic gcov if needed)
echo "Generating coverage reports..."
if command -v gcovr >/dev/null 2>&1; then
    # Run from build dir so gcovr finds .gcno/.gcda easily
    (
        cd "$BUILD_DIR"
        # Text + XML + HTML reports
        gcovr -r "$PROJECT_ROOT/src" \
            --object-directory . \
            --exclude '.*_deps.*' \
            --exclude '.*/tests/.*' \
            --txt >"$TXT_LOG" 2>&1 || true

        gcovr -r "$PROJECT_ROOT/src" \
            --object-directory . \
            --exclude '.*_deps.*' \
            --exclude '.*/tests/.*' \
            --xml -o "$XML_OUT" >/dev/null 2>&1 || true

        gcovr -r "$PROJECT_ROOT/src" \
            --object-directory . \
            --exclude '.*_deps.*' \
            --exclude '.*/tests/.*' \
            --html --html-details -o "$HTML_DIR/index.html" >/dev/null 2>&1 || true
    )

    echo "Coverage text log: $TXT_LOG"
    echo "Coverage XML:      $XML_OUT"
    echo "Coverage HTML:     $HTML_DIR/index.html"

    # Parse coverage percent from text log
    COVERAGE_PERCENT=""
    if grep -E 'lines:' "$TXT_LOG" >/dev/null 2>&1; then
        COVERAGE_PERCENT=$(grep -E 'lines:' "$TXT_LOG" | tail -1 | sed -E 's/.*lines:\s*([0-9]+\.?[0-9]*)%.*/\1/')
    elif grep -E '^TOTAL' "$TXT_LOG" >/dev/null 2>&1; then
        COVERAGE_PERCENT=$(grep -E '^TOTAL' "$TXT_LOG" | awk '{for(i=1;i<=NF;i++){if($i ~ /%/){gsub("%","",$i); print $i; exit}}}')
    fi

        if [[ -n "${COVERAGE_PERCENT}" ]]; then
        echo ""
        echo "=== COVERAGE SUMMARY ==="
            echo "Total line coverage: ${COVERAGE_PERCENT}% (target ${COVERAGE_TARGET}%, enforce=${ENFORCE_COVERAGE})"
        # Integer compare using bash (drop decimals)
        pct_int=${COVERAGE_PERCENT%.*}
            if (( pct_int >= COVERAGE_TARGET )); then
            echo "✓ SUCCESS: Coverage target met"
            exit 0
        else
                echo "⚠ WARNING: Coverage (${COVERAGE_PERCENT}%) below target (${COVERAGE_TARGET}%)"
                if [[ "$ENFORCE_COVERAGE" == "true" ]]; then
                    exit 1
                else
                    exit 0
                fi
        fi
    else
        echo "⚠ WARNING: Could not parse coverage percent from gcovr output"
        exit 0
    fi
else
    echo "gcovr not found; attempting minimal gcov-based summary..."
    (
        cd "$BUILD_DIR"
        # Generate basic .gcov files for core sources
        find "$PROJECT_ROOT/src" -name '*.cpp' -print0 | xargs -0 -I{} gcov -o . {}
    ) || true
    echo "Basic gcov run complete (no percentage enforcement)."
    exit 0
fi
