name: Generate API Documentation

# DISABLED: Automatic triggers suspended until deployment readiness
on:
  workflow_dispatch: # Manual trigger only

# DISABLED TRIGGERS:
# on:
#   push:
#     branches: [main, develop]
#     paths:
#       - "include/huntmaster/**/*.h"
#       - "include/huntmaster/**/*.hpp"
#       - "Doxyfile"
#       - "scripts/generate_docs.sh"
#       - ".github/workflows/documentation.yml"
#   pull_request:
#     branches: [main]
#     paths:
#       - "include/huntmaster/**/*.h"
#       - "include/huntmaster/**/*.hpp"
#       - "Doxyfile"
#       - "scripts/generate_docs.sh"
#   workflow_dispatch: # Allow manual triggering

jobs:
  generate-docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for proper versioning

      - name: Install Doxygen
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz
          doxygen --version

      - name: Validate Doxyfile
        run: |
          if [ ! -f "Doxyfile" ]; then
            echo "Error: Doxyfile not found"
            exit 1
          fi
          echo "Doxyfile found and ready for processing"

      - name: Generate documentation
        run: |
          chmod +x scripts/generate_docs.sh
          ./scripts/generate_docs.sh

      - name: Check documentation output
        run: |
          if [ ! -d "docs/api/html" ]; then
            echo "Error: Documentation was not generated"
            exit 1
          fi

          # Count generated files
          HTML_FILES=$(find docs/api/html -name "*.html" | wc -l)
          echo "Generated $HTML_FILES HTML files"

          # Check for key files
          REQUIRED_FILES=("docs/api/html/index.html" "docs/api/html/annotated.html")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required file $file not found"
              exit 1
            fi
          done

          echo "Documentation validation passed"

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-documentation
          path: docs/api/html/
          retention-days: 30

      - name: Deploy to GitHub Pages (main branch only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/api/html
          destination_dir: api
          keep_files: false
          commit_message: "Deploy API documentation"

      - name: Comment on PR with documentation preview
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('üìö API Documentation Preview')
            );

            const commentBody = `üìö **API Documentation Preview**

            The API documentation has been successfully generated for this pull request.

            üìÑ **Documentation artifacts**: Available in the workflow run artifacts
            üîç **Changes detected**: Header files or documentation configuration updated
            ‚úÖ **Validation**: All required documentation files generated successfully

            To view the full documentation locally:
            1. Download the \`api-documentation\` artifact from this workflow run
            2. Extract and open \`index.html\` in your browser

            *This comment is automatically updated when documentation changes are detected.*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  validate-documentation:
    runs-on: ubuntu-latest
    needs: generate-docs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-documentation
          path: docs/api/html/

      - name: Validate documentation completeness
        run: |
          echo "Validating API documentation completeness..."

          # Check for undocumented public classes/functions
          UNDOC_WARNINGS=0

          # Look for undocumented public headers (basic check)
          find include/huntmaster/core -name "*.h" -exec grep -L "@file\|@brief" {} \; > undoc_files.txt || true

          if [ -s undoc_files.txt ]; then
            echo "‚ö†Ô∏è Files without proper documentation headers:"
            cat undoc_files.txt
            UNDOC_WARNINGS=$((UNDOC_WARNINGS + 1))
          fi

          # Check HTML output for undocumented warnings
          if grep -r "undocumented" docs/api/html/ >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Found undocumented members in generated documentation"
            UNDOC_WARNINGS=$((UNDOC_WARNINGS + 1))
          fi

          # Summary
          if [ $UNDOC_WARNINGS -gt 0 ]; then
            echo "‚ö†Ô∏è Documentation validation found $UNDOC_WARNINGS warning(s)"
            echo "Consider improving documentation coverage for better API usability"
          else
            echo "‚úÖ Documentation validation passed - no major issues found"
          fi

          # Always succeed for now (warnings don't fail the build)
          exit 0
